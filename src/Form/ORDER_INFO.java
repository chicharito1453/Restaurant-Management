/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import Entity.DANHSACHMON;
import Entity.HOADON;
import Entity.HOADONCT;
import Entity.NHANVIEN;
import Model.BANSUDUNGDAO;
import Model.DANHSACHMONDAO;
import Model.GHIHOADONDAO;
import Model.HOADONCTDAO;
import Model.HOADONDAO;
import TienIch.Auth;
import TienIch.MsgBox;
import TienIch.XDate;
import TienIch.XImage;
import java.awt.Image;
import java.io.File;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class ORDER_INFO extends javax.swing.JFrame {

    DANHSACHMONDAO dsmdao = new DANHSACHMONDAO();
    HOADONDAO hddao = new HOADONDAO();
    HOADONCTDAO hdctdao = new HOADONCTDAO();
    BANSUDUNGDAO bsddao = new BANSUDUNGDAO();
    GHIHOADONDAO ghddao = new GHIHOADONDAO();
    int maHD = -1;
    boolean sua = false;

    /**
     * Creates new form ORDER_INFO
     */
    public ORDER_INFO() {
        this.setUndecorated(true);
        initComponents();
        init();
    }

    public ORDER_INFO(NHANVIEN nv) {
        this.setUndecorated(true);
        initComponents();
        init();
        HOADON hd = hddao.selectLastHD();
        maHD = hd.getIdHD();
    }

    public ORDER_INFO(NHANVIEN nv, Integer idHD) {
        this.setUndecorated(true);
        initComponents();
        init();
        sua = true;
        maHD = idHD;
        filltable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboDSM = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHDCT = new javax.swing.JTable();
        lblHinhAnh = new javax.swing.JLabel();
        btnThemMon = new javax.swing.JButton();
        btnXoaMon = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtSL = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblGia = new javax.swing.JLabel();
        rboThucAn = new javax.swing.JRadioButton();
        rboNuocUong = new javax.swing.JRadioButton();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("                                                  ĐẶT MÓN");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cboDSM.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboDSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDSMActionPerformed(evt);
            }
        });
        getContentPane().add(cboDSM, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 141, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Danh sách món:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Số lượng:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        tblHDCT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hóa đơn", "Mã món", "Tên món", "Số lượng", "Đơn giá"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHDCT);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 244, 500, 210));

        lblHinhAnh.setBackground(new java.awt.Color(255, 255, 255));
        lblHinhAnh.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHinhAnh.setOpaque(true);
        getContentPane().add(lblHinhAnh, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 150, 150));

        btnThemMon.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnThemMon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/new.png"))); // NOI18N
        btnThemMon.setText("Thêm món");
        btnThemMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemMonActionPerformed(evt);
            }
        });
        getContentPane().add(btnThemMon, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        btnXoaMon.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnXoaMon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btnXoaMon.setText("Xóa món");
        btnXoaMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaMonActionPerformed(evt);
            }
        });
        getContentPane().add(btnXoaMon, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 130, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("THỰC ĐƠN CHI TIẾT");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 224, 29));

        txtSL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getContentPane().add(txtSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 140, -1));

        btnOK.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        getContentPane().add(btnOK, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 480, 70, -1));

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 480, -1, -1));

        lblGia.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblGia.setForeground(new java.awt.Color(255, 0, 0));
        lblGia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(lblGia, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 210, 150, 20));

        rboThucAn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rboThucAn.setText("Thức ăn");
        rboThucAn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rboThucAnActionPerformed(evt);
            }
        });
        getContentPane().add(rboThucAn, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        rboNuocUong.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rboNuocUong.setText("Nước uống");
        rboNuocUong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rboNuocUongActionPerformed(evt);
            }
        });
        getContentPane().add(rboNuocUong, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, -1, -1));

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/55.jpg"))); // NOI18N
        getContentPane().add(Background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-5, -19, 500, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    private void cboDSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDSMActionPerformed
        DANHSACHMON dsm = (DANHSACHMON) cboDSM.getSelectedItem();
        fillAnh(dsm);
    }//GEN-LAST:event_cboDSMActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        openOrder();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnThemMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemMonActionPerformed
        insertToTable();
    }//GEN-LAST:event_btnThemMonActionPerformed

    private void btnXoaMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaMonActionPerformed
        deleteFromTable();
    }//GEN-LAST:event_btnXoaMonActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        saveAll();
    }//GEN-LAST:event_btnOKActionPerformed

    private void rboThucAnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rboThucAnActionPerformed
        rboNuocUong.setSelected(false);
        fillCboDSM_ThucAn();
    }//GEN-LAST:event_rboThucAnActionPerformed

    private void rboNuocUongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rboNuocUongActionPerformed
        rboThucAn.setSelected(false);
        fillCboDSM_NuocUong();
    }//GEN-LAST:event_rboNuocUongActionPerformed

    void init() {
        setLocationRelativeTo(this);
        lblHinhAnh.setToolTipText("noimage2.jpg");
        lblHinhAnh.setIcon(XImage.read("noimage2.jpg"));
        rboThucAn.setSelected(true);
        fillCboDSM_ThucAn();
    }

    void fillCboDSM_ThucAn() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboDSM.getModel();
        model.removeAllElements();
        try {
            List<DANHSACHMON> list = dsmdao.selectAll_Mon(1);
            for (int i = 0; i < list.size(); i++) {
                if (i == 0) {
                    fillAnh(list.get(i));
                }
                model.addElement(list.get(i));
            }
        } catch (Exception e) {
        }
    }
    
    void fillCboDSM_NuocUong() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboDSM.getModel();
        model.removeAllElements();
        try {
            List<DANHSACHMON> list = dsmdao.selectAll_Mon(0);
            for (int i = 0; i < list.size(); i++) {
                if (i == 0) {
                    fillAnh(list.get(i));
                }
                model.addElement(list.get(i));
            }
        } catch (Exception e) {
        }
    }

    void fillAnh(DANHSACHMON dsm) {
        try {
            DecimalFormat format = new DecimalFormat();
            format.setDecimalSeparatorAlwaysShown(false);
            Image img = this.read(dsm.getHinhanh());
            Image resizedImage = img.getScaledInstance(lblHinhAnh.getWidth(), lblHinhAnh.getHeight(), Image.SCALE_SMOOTH);
            lblHinhAnh.setIcon(new ImageIcon(resizedImage));
            lblHinhAnh.setToolTipText(dsm.getHinhanh());
            lblGia.setText(format.format(dsm.getDonGia()) + " VNĐ");
        } catch (Exception e) {
        }
    }

    public Image read(String file) {
        File f = new File("logos", file);
        try {
            Image img = ImageIO.read(f);
            return img;
        } catch (Exception ex) {

        }
        return null;
    }

    boolean check() {
        if (txtSL.getText().trim().isEmpty()) {
            MsgBox.alert(this, "Chưa nhập số lượng");
            return false;
        } else if (!txtSL.getText().trim().matches("\\d+")) {
            MsgBox.alert(this, "Số lượng phải là số nguyên");
            return false;
        } else {
            return true;
        }
    }

    void insertToTable() {
        DefaultTableModel model = (DefaultTableModel) tblHDCT.getModel();
        DANHSACHMON dsm = (DANHSACHMON) cboDSM.getSelectedItem();
        if (check()) {
            Object[] row = {maHD, dsm.getIdMon(), dsm.getTenMon(), txtSL.getText().trim(), dsm.getDonGia()
            };
            model.addRow(row);
        }
    }

    void deleteFromTable() {
        int index = tblHDCT.getSelectedRow();
        int idMon = Integer.parseInt(tblHDCT.getValueAt(index, 1).toString());

        if (tblHDCT.getRowCount() <= 0) {
            MsgBox.alert(this, "Chưa có món để xóa!");
        } else if (index < 0) {
            MsgBox.alert(this, "Chọn món cần xóa!");
        } else {
            DefaultTableModel model2 = (DefaultTableModel) tblHDCT.getModel();
            DANHSACHMON dsm = dsmdao.selectById(idMon);
            model2.removeRow(index);
        }
    }

    void saveAll() {
        Date today = XDate.toDate(getToday(), "MM/dd/yyyy");
        double tongTien = 0;
        if (tblHDCT.getRowCount() > 0) {
            for (int i = 0; i < tblHDCT.getRowCount(); i++) {
                int maMon = Integer.parseInt(tblHDCT.getValueAt(i, 1).toString());
                int soLuong = Integer.parseInt(tblHDCT.getValueAt(i, 3).toString());
                double donGia = Double.parseDouble(tblHDCT.getValueAt(i, 4).toString());
                tongTien += donGia * soLuong;
                HOADONCT hdct = new HOADONCT();
                hdct.setIdHD(maHD);
                hdct.setIdMon(maMon);
                hdct.setSoLuong(soLuong);
                hdct.setDonGia(donGia);
                if (!sua) {
                    hdctdao.insert(hdct);
                } else {
                    if (i == 0) {
                        hdctdao.delete(hdct.getIdHD());
                    }
                    hdctdao.insert(hdct);
                }
            }
            HOADON hd = new HOADON();
            hd.setIdHD(maHD);
            hd.setNgayXuat(today);
            hd.setTongTien(tongTien);
            hd.setTrangthai("Chưa thanh toán");
            hddao.update(hd);
            openOrder();
        } else {
            if(!sua){
                openOrder();
            }
            else{
                hdctdao.delete(maHD);
                HOADON hd = new HOADON(){};
                hd.setIdHD(maHD);
                hd.setNgayXuat(today);
                hd.setTongTien(0);
                hd.setTrangthai("Chưa thanh toán");
                hddao.update(hd);
                openOrder();
            }
        }
    }

    void filltable() {
        try {
            DefaultTableModel model = (DefaultTableModel) tblHDCT.getModel();
            model.setRowCount(0);
            List<HOADONCT> list = hdctdao.selectHDCT(maHD);
            if (list != null) {
                for (HOADONCT hdct : list) {
                    DANHSACHMON dsm = dsmdao.selectById(hdct.getIdMon());
                    Object[] row = {maHD, dsm.getIdMon(), dsm.getTenMon(), hdct.getSoLuong(), dsm.getDonGia()
                    };
                    model.addRow(row);
                }
            }
        } catch (Exception e) {
        }
    }

    String getToday() {
        Calendar c = Calendar.getInstance();
        int thang = c.get(Calendar.MONTH) + 1;
        int ngay = c.get(Calendar.DATE);
        int nam = c.get(Calendar.YEAR);
        String date = thang + "/" + ngay + "/" + nam;
        return date;
    }

    void openOrder() {
        ORDER or = new ORDER(Auth.user);
        or.setVisible(true);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ORDER_INFO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ORDER_INFO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ORDER_INFO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ORDER_INFO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ORDER_INFO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnThemMon;
    private javax.swing.JButton btnXoaMon;
    private javax.swing.JComboBox<String> cboDSM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblGia;
    private javax.swing.JLabel lblHinhAnh;
    private javax.swing.JRadioButton rboNuocUong;
    private javax.swing.JRadioButton rboThucAn;
    private javax.swing.JTable tblHDCT;
    private javax.swing.JTextField txtSL;
    // End of variables declaration//GEN-END:variables
}

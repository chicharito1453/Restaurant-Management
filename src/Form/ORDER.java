/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Form;

import Entity.BAN;
import Entity.BANSUDUNG;
import Entity.DANHSACHMON;
import Entity.GHIHOADON;
import Entity.HOADON;
import Entity.HOADONCT;
import Entity.NHANVIEN;
import Model.BANDAO;
import Model.BANSUDUNGDAO;
import Model.DANHSACHMONDAO;
import Model.GHIHOADONDAO;
import Model.HOADONCTDAO;
import Model.HOADONDAO;
import TienIch.Auth;
import TienIch.MsgBox;
import TienIch.XDate;
import TienIch.XImage;
import java.awt.Color;
import java.awt.Font;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class ORDER extends javax.swing.JFrame {

    BANDAO bdao = new BANDAO();
    HOADONDAO hddao = new HOADONDAO();
    BANSUDUNGDAO bsddao = new BANSUDUNGDAO();
    GHIHOADONDAO ghddao = new GHIHOADONDAO();
    HOADONCTDAO hdctdao = new HOADONCTDAO();
    DANHSACHMONDAO dsmdao = new DANHSACHMONDAO();

    /**
     * Creates new form QLNV
     */
    public ORDER() {
        initComponents();
        init();
    }

    public ORDER(NHANVIEN nv) {
        initComponents();
        Auth.user = nv;
        init();
    }

    void init() {
        this.setIconImage(XImage.getAppIcon());
        setLocationRelativeTo(this);
        fillCboBan();
        filltable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHD = new javax.swing.JTable();
        cboBan = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        btnGhiHD = new javax.swing.JButton();
        btnSuaHD = new javax.swing.JButton();
        btnBoHD = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtHDCT = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnXuatHD = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(480, 595));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblHD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã HD", "Mã bàn", "Tổng tiền", "Ngày"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHD);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 470, 254));

        cboBan.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(cboBan, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 104, 89, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Chọn bàn");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 69, -1, -1));

        btnGhiHD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnGhiHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/new.png"))); // NOI18N
        btnGhiHD.setText("Ghi hóa đơn");
        btnGhiHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGhiHDActionPerformed(evt);
            }
        });
        getContentPane().add(btnGhiHD, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 150, -1));

        btnSuaHD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSuaHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/update.png"))); // NOI18N
        btnSuaHD.setText("Sửa hóa đơn");
        btnSuaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaHDActionPerformed(evt);
            }
        });
        getContentPane().add(btnSuaHD, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 150, -1));

        btnBoHD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBoHD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/delete.png"))); // NOI18N
        btnBoHD.setText("Không xuất");
        btnBoHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoHDActionPerformed(evt);
            }
        });
        getContentPane().add(btnBoHD, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 150, -1));

        txtHDCT.setEditable(false);
        txtHDCT.setColumns(20);
        txtHDCT.setRows(5);
        jScrollPane2.setViewportView(txtHDCT);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 270, 144));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Chi tiết thực đơn:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(172, 65, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ĐẶT MÓN");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 130, 29));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/55.jpg"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 500));

        btnXuatHD.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnXuatHD.setText("Xuất hóa đơn");
        btnXuatHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatHDActionPerformed(evt);
            }
        });
        getContentPane().add(btnXuatHD, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 520, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGhiHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGhiHDActionPerformed
        insert();
    }//GEN-LAST:event_btnGhiHDActionPerformed

    private void btnBoHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoHDActionPerformed
        delete();
    }//GEN-LAST:event_btnBoHDActionPerformed

    private void btnSuaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaHDActionPerformed
        update();
    }//GEN-LAST:event_btnSuaHDActionPerformed

    private void tblHDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHDMouseClicked
        xemChiTiet();
    }//GEN-LAST:event_tblHDMouseClicked

    private void btnXuatHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatHDActionPerformed
        xuatHoaDon();
    }//GEN-LAST:event_btnXuatHDActionPerformed

    void xemChiTiet() {
        txtHDCT.selectAll();
        txtHDCT.replaceSelection("");
        int index = tblHD.getSelectedRow();
        int idHD = Integer.parseInt(tblHD.getValueAt(index, 0).toString());
        try {
            List<HOADONCT> list = hdctdao.selectHDCT(idHD);
            if (list != null) {
                for (int i = 0; i < list.size(); i++) {
                    int maMon = list.get(i).getIdMon();
                    DANHSACHMON dsm = dsmdao.selectById(maMon);
                    txtHDCT.append(dsm.getTenMon() + "\t------>" + "\tsố lượng: " + list.get(i).getSoLuong() + "\n");
                }
            }
        } catch (Exception e) {
        }
    }

    void fillCboBan() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboBan.getModel();
        model.removeAllElements();
        try {
            List<BAN> list = bdao.selectBanTrong();
            for (int i = 0; i < list.size(); i++) {
                model.addElement(list.get(i));
            }
        } catch (Exception e) {
        }
    }

    void filltable() {
        DefaultTableModel model = (DefaultTableModel) tblHD.getModel();
        model.setRowCount(0);
        try {
            List<HOADON> list = hddao.selectHdChuaXuat();
            for (HOADON hd : list) {
                int maHD = hd.getIdHD();
                BANSUDUNG bsd = bsddao.idBanForHD(maHD);
                String a = "Chưa có dữ liệu";
                if (bsd == null) {
                    Object[] row = {hd.getIdHD(), a, hd.getTongTien(), hd.getNgayXuat()
                    };
                    model.addRow(row);
                } else {
                    Object[] row = {hd.getIdHD(), bsd.getIdBan(), hd.getTongTien(), hd.getNgayXuat()
                    };
                    model.addRow(row);
                }

            }
        } catch (Exception e) {
        }
    }

    void insert() {
        if (cboBan.getItemCount() > 0) {
            Date today = XDate.toDate(getToday(), "MM/dd/yyyy");
            int idBan = Integer.parseInt(cboBan.getSelectedItem().toString());
            HOADON hd = new HOADON();
            hd.setNgayXuat(today);
            hddao.insert(hd);
            hd = hddao.selectLastHD();
            if (hd != null) {
                BANSUDUNG bsd = new BANSUDUNG();
                bsd.setIdHD(hd.getIdHD());
                bsd.setIdBan(idBan);
                bsd.setNgay(today);
                bsddao.insert(bsd);
                GHIHOADON ghd = new GHIHOADON();
                ghd.setIdHD(hd.getIdHD());
                ghd.setNVghi(Auth.user.getIdNV());
                ghd.setNgayGhi(today);
                ghddao.insert(ghd);
                bdao.updateTrangThaiBan(idBan);
                fillCboBan();
                filltable();
                openOrderInfo();
            }
        } else {
            MsgBox.alert(this, "Đã hết bàn trống!");
        }
    }

    void delete() {
        int index = tblHD.getSelectedRow();
        if (tblHD.getRowCount() <= 0) {
            MsgBox.alert(this, "Chưa có hóa đơn để xóa!");
        } else if (index < 0) {
            MsgBox.alert(this, "Chọn hóa đơn để xóa!");
        } else {
            if (MsgBox.confirm(this, "Bạn có chắc không xuất hóa đơn này")) {
                int idHD = Integer.parseInt(tblHD.getValueAt(index, 0).toString());
                int idBan = Integer.parseInt(tblHD.getValueAt(index, 1).toString());
                ghddao.deleteHdTam(idHD);
                bsddao.deleteHDT(idHD);
                hdctdao.delete(idHD);
                hddao.delete(idHD);
                bdao.updateTrangThaiBanTrong(idBan);
                txtHDCT.selectAll();
                txtHDCT.replaceSelection("");
                fillCboBan();
                filltable();
                MsgBox.alert(this, "Đã hủy hóa đơn!");
            }
        }
    }

    void update() {
        int index = tblHD.getSelectedRow();
        if (tblHD.getRowCount() <= 0) {
            MsgBox.alert(this, "Chưa có hóa đơn để sửa!");
        } else if (index < 0) {
            MsgBox.alert(this, "Chọn hóa đơn để sửa!");
        } else {
            int idHD = Integer.parseInt(tblHD.getValueAt(index, 0).toString());
            ORDER_INFO orinf = new ORDER_INFO(Auth.user, idHD);
            orinf.setVisible(true);
            dispose();
        }
    }

    void xuatHoaDon() {
        int index = tblHD.getSelectedRow();
        if (tblHD.getRowCount() <= 0) {
            MsgBox.alert(this, "Chưa có hóa đơn để xuất!");
        } else if (index < 0) {
            MsgBox.alert(this, "Chọn hóa đơn muốn xuất!");
        } else if (Double.parseDouble(tblHD.getValueAt(index, 2).toString()) == 0) {
            MsgBox.alert(this, "Không thể xuất hóa đơn rỗng!");
        } else {
            if (MsgBox.confirm(this, "Xuất hóa đơn bây giờ?")) {
                double tongtien = Double.parseDouble(tblHD.getValueAt(index, 2).toString());
                int maHD = Integer.parseInt(tblHD.getValueAt(index, 0).toString());
                int maBan = Integer.parseInt(tblHD.getValueAt(index, 1).toString());
                Date today = XDate.toDate(getToday(), "MM/dd/yyyy");
                HOADON hd = new HOADON();
                hd.setIdHD(maHD);
                hd.setTongTien(tongtien);
                hd.setNgayXuat(today);
                hd.setTrangthai("Đã thanh toán");
                hddao.update(hd);
                bdao.updateTrangThaiBanTrong(maBan);
                txtHDCT.selectAll();
                txtHDCT.replaceSelection("");
                fillCboBan();
                filltable();
                MsgBox.alert(this, "Xuất hóa đơn thành công");
            }
        }
    }

    String getToday() {
        Calendar c = Calendar.getInstance();
        int thang = c.get(Calendar.MONTH) + 1;
        int ngay = c.get(Calendar.DATE);
        int nam = c.get(Calendar.YEAR);
        String date = thang + "/" + ngay + "/" + nam;
        return date;
    }

    void openOrderInfo() {
        ORDER_INFO orinf = new ORDER_INFO(Auth.user);
        orinf.setVisible(true);
        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ORDER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ORDER().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBoHD;
    private javax.swing.JButton btnGhiHD;
    private javax.swing.JButton btnSuaHD;
    private javax.swing.JButton btnXuatHD;
    private javax.swing.JComboBox<String> cboBan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblHD;
    private javax.swing.JTextArea txtHDCT;
    // End of variables declaration//GEN-END:variables
}
